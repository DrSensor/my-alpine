[use-grammars]
only = [
  "fish", "nix", "yaml",
  "markdown", "markdown_inline",
  "scss", "astro", "vue", "svelte",
]

#(*) DOCS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#
  
[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["md"]
roots = []

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "deno"
args = ["lsp"]

[language.config]
enable = true
lint = false
testing = { enable = false }

[[grammar]]
name = "markdown"

[grammar.source]
git = "https://github.com/MDeiml/tree-sitter-markdown"
subpath = "tree-sitter-markdown"


[[language]]
name = "markdown.inline"
scope = "source.markdown.inline"
injection-regex = "markdown\\.inline"
file-types = []
roots = []
grammar = "markdown_inline"

[[grammar]]
name = "markdown_inline"

[grammar.source]
git = "https://github.com/MDeiml/tree-sitter-markdown"
subpath = "tree-sitter-markdown-inline"

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< DOCS (*)#
#(*) CONFIG >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml"]
roots = []
comment-token = "#"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "taplo"
args = ["lsp", "stdio"]

[language.auto-pairs]
'[' = ']'
'{' = '}'
'"' = '"'
"'" = "'"


[[language]]
name = "yaml"
scope = "source.yaml"
injection-regex = "yml|yaml"
file-types = ["yml", "yaml"]
roots = []
comment-token = "#"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "yaml-language-server"
args = ["--stdio"]

[language.auto-pairs]
'{' = '}'
'(' = ')'
'`' = '`'
'"' = '"'
"'" = "'"

[[grammar]]
name = "yaml"

[grammar.source]
git = "https://github.com/ikatyang/tree-sitter-yaml"


[[language]]
name = "json"
scope = "source.json"
injection-regex = "jsonc?"
file-types = ["json", "jsonc"]
roots = []

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "deno"
args = ["lsp"]

[language.config]
enable = true
lint = true
testing = { enable = false }

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CONFIG (*)#
#(*) SHELL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#

[[language]]
name = "fish"
scope = "source.fish"
injection-regex = "fish"
file-types = ["fish"]
shebangs = ["fish"]
roots = []
comment-token = "#"

indent = { tab-width = 4, unit = "    " }

[[grammar]]
name = "fish"

[grammar.source]
git = "https://github.com/ram02z/tree-sitter-fish"


[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = ["sh", "bash", "zsh", ".bash_login", ".bash_logout", ".bash_profile", ".bashrc", ".profile", ".zshenv", ".zlogin", ".zlogout", ".zprofile", ".zshrc", "APKBUILD", "PKGBUILD", "eclass", "ebuild", "bazelrc", ".bash_aliases"]
shebangs = ["sh", "bash", "dash", "zsh"]
roots = []
comment-token = "#"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "bash-language-server"
args = ["start"]

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< SHELL (*)#
#(*) WEBDEV >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#

[[language]]
name = "typescript.node"
scope = "source.ts"
injection-regex = "cts"
file-types = ["cts"]
shebangs = ["node"]
roots = []
comment-token = "//"
grammar = "typescript"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.formatter]
command = "eslint"
args = ["--fix"]

[language.language-server]
command = "typescript-language-server"
args = ["--stdio"]
language-id = "typescript"

[language.config]
hostInfo = "helix"

[language.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true


[[language]]
name = "javascript.node"
scope = "source.js"
injection-regex = "(cjs|commonjs|nodejs)"
file-types = ["cjs"]
shebangs = ["node"]
roots = []
comment-token = "//"
grammar = "javascript"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.formatter]
command = "eslint"
args = ["--fix"]

[language.language-server]
command = "typescript-language-server"
args = ["--stdio"]
language-id = "javascript"

[language.config]
hostInfo = "helix"

[language.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language.debugger]
name = "node-debug2"
transport = "stdio"
quirks = { absolute-paths = true } # args consisting of cmd (node) and path to adapter should be added to user's configuration

[[language.debugger.templates]]
name = "source"
request = "launch"
completion = [ { name = "main", completion = "filename", default = "index.js" } ]
args = { program = "{0}" }


[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "(js|javascript)"
file-types = ["js", "mjs"]
shebangs = ["deno"]
roots = []
comment-token = "//"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "deno"
args = ["lsp"]

[language.config]
enable = true
unstable = true

[language.config.testing]
enable = true
args = ["--allow-all"]

[language.config.codeLens]
implementations = true
references = true
referencesAllFunctions = true

[language.config.suggest.imports]
autoDiscover = true

[language.config.suggest.imports.hosts]
"https://deno.land" = true
"https://esm.sh" = true

[language.config.inlayHints]
enumMemberValues = { enabled = true }
functionLikeReturnTypes = { enabled = true }
parameterNames = { enabled = "literals", suppressWhenArgumentMatchesName = true }
parameterTypes = { enabled = true }
propertyDeclarationTypes = { enabled = true }
variableTypes = { enabled = true, suppressWhenTypeMatchesName = true }


[[language]]
name = "jsx"
scope = "source.jsx"
injection-regex = "jsx"
file-types = ["jsx"]
shebangs = ["deno"]
roots = []
comment-token = "//"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "deno"
args = ["lsp"]

[language.config]
enable = true
unstable = true

[language.config.testing]
enable = true
args = ["--allow-all"]

[language.config.codeLens]
implementations = true
references = true
referencesAllFunctions = true

[language.config.suggest.imports]
autoDiscover = true

[language.config.suggest.imports.hosts]
"https://deno.land" = true
"https://esm.sh" = true

[language.config.inlayHints]
enumMemberValues = { enabled = true }
functionLikeReturnTypes = { enabled = true }
parameterNames = { enabled = "literals", suppressWhenArgumentMatchesName = true }
parameterTypes = { enabled = true }
propertyDeclarationTypes = { enabled = true }
variableTypes = { enabled = true, suppressWhenTypeMatchesName = true }


[[language]]
name = "typecript"
scope = "source.ts"
injection-regex = "(ts|typescript)"
file-types = ["ts", "mts"]
shebangs = ["deno"]
roots = []
comment-token = "//"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "deno"
args = ["lsp"]

[language.config]
enable = true
unstable = true

[language.config.testing]
enable = true
args = ["--allow-all"]

[language.config.codeLens]
implementations = true
references = true
referencesAllFunctions = true

[language.config.suggest.imports]
autoDiscover = true

[language.config.suggest.imports.hosts]
"https://deno.land" = true
"https://esm.sh" = true

[language.config.inlayHints]
enumMemberValues = { enabled = true }
functionLikeReturnTypes = { enabled = true }
parameterNames = { enabled = "literals", suppressWhenArgumentMatchesName = true }
parameterTypes = { enabled = true }
propertyDeclarationTypes = { enabled = true }
variableTypes = { enabled = true, suppressWhenTypeMatchesName = true }


[[language]]
name = "tsx"
scope = "source.tsx"
injection-regex = "tsx"
file-types = ["tsx"]
shebangs = ["deno"]
roots = []
comment-token = "//"

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "deno"
args = ["lsp"]

[language.config]
enable = true
unstable = true

[language.config.testing]
enable = true
args = ["--allow-all"]

[language.config.codeLens]
implementations = true
references = true
referencesAllFunctions = true

[language.config.suggest.imports]
autoDiscover = true

[language.config.suggest.imports.hosts]
"https://deno.land" = true
"https://esm.sh" = true

[language.config.inlayHints]
enumMemberValues = { enabled = true }
functionLikeReturnTypes = { enabled = true }
parameterNames = { enabled = "literals", suppressWhenArgumentMatchesName = true }
parameterTypes = { enabled = true }
propertyDeclarationTypes = { enabled = true }
variableTypes = { enabled = true, suppressWhenTypeMatchesName = true }


[[language]]
name = "css"
scope = "source.css"
injection-regex = "css"
file-types = ["css", "scss"]
roots = []

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language.config]
provideFormatter = true


[[language]]
name = "scss"
scope = "source.scss"
injection-regex = "scss"
file-types = ["scss"]
roots = []

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language.config]
provideFormatter = true

[[grammar]]
name = "scss"

[grammar.source]
git = "https://github.com/serenadeai/tree-sitter-scss"


[[language]]
name = "html"
scope = "text.html.basic"
injection-regex = "html"
file-types = ["html"]
roots = []

indent = { tab-width = 2, unit = "  " }
auto-format = true

[language.language-server]
command = "vscode-html-language-server"
args = ["--stdio"]

[language.config]
provideFormatter = true

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< WEBDEV (*)#

